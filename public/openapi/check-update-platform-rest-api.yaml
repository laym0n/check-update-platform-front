openapi: 3.0.3
info:
  title: CheckUpdatePlatform
  description: API дипломного проекта на тему "Платформа по отслеживанию обновлений веб-ресурсов"
  contact:
    email: victor_k02@mail.ru
    name: Victor Kochnev
    url: https://vk.com/laym0n
  version: 1.0.0
paths:
  /user/register:
    post:
      tags:
        - User
      summary: Регистарация нового пользователя
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        200:
          description: успешная регистрация
        400:
          description: ошибка валидации данных
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'
        409:
          description: email уже используется
  /authentication:
    post:
      tags:
        - Authentication
      summary: Аутентификация пользователя
      operationId: authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        200:
          description: успешная аутентификация
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AuthenticateResponse'
        400:
          description: неуспешная аутентификация
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'

  /authentication/refresh:
    post:
      tags:
        - Authentication
      summary: Обновление аутентификации пользователя
      operationId: authenticationRefresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRefreshRequest'
      responses:
        200:
          description: успешная аутентификация
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AuthenticateResponse'
        400:
          description: неуспешная аутентификация
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'

  /webresource/observing:
    post:
      tags:
        - WebResourceObserving
      summary: Добавление нового веб ресурса для отслеживания
      operationId: createObserving
      security:
        - JwtToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebResourceObservingAddRequest'
      responses:
        200:
          description: успешное добавление
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WebResourceObservingDto'
        400:
          description: ошибка валидации данных
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'

  /webresource/observing/{entityId}/stop:
    put:
      tags:
        - WebResourceObserving
      summary: Остановка отслеживания веб ресурса
      operationId: stopObserve
      security:
        - JwtToken: [ ]
      parameters:
        - $ref: '#/components/parameters/EntityId'
      responses:
        200:
          description: успешное удаление
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WebResourceObservingDto'
        400:
          description: ошибка валидации данных
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'

  /plugin:
    post:
      tags:
        - Plugin
      summary: Добавить плагин на платформу
      operationId: createPlugin
      security:
        - JwtToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPluginRequest'
      responses:
        200:
          description: успешное создание
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AddPluginResponse'
        400:
          description: ошибка валидации данных
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'

  /task:
    post:
      tags:
        - Task
      summary: Добавить задачу на платформу
      operationId: createTask
      security:
        - JwtToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        200:
          description: успешное добавление
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TaskDto'
        400:
          description: ошибка валидации данных
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'

  /task/{entityId}/decision:
    put:
      tags:
        - Task
      summary: Решить задачу
      operationId: makeDecision
      security:
        - JwtToken: [ ]
      parameters:
        - $ref: '#/components/parameters/EntityId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MakeDecisionRequest'
      responses:
        200:
          description: успешное принятие решение
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TaskDto'
        400:
          description: ошибка валидации данных
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'

  /plugin/usage:
    post:
      tags:
        - PluginUsage
      summary: Начать использовать плагин
      operationId: createPluginUsage
      security:
        - JwtToken: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePluginUsageRequest'
      responses:
        200:
          description: успешное начало использование плагина
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PluginUsageDto'
        400:
          description: ошибка валидации данных
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageDto'

components:
  parameters:
    EntityId:
      name: entityId
      in: path
      description: id отслеживания веб ресурса
      required: true
      schema:
        type: string
        format: uuid

  securitySchemes:
    JwtTokenSecurity:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRegistrationRequest:
      type: object
      properties:
        email:
          type: string
          description: email для регистрации
          format: email
          minLength: 1
        password:
          type: string
          description: Пароль
          minLength: 1
      required:
        - email
        - password

    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        rememberMe:
          type: boolean
      required:
        - email
        - password
        - rememberMe

    AuthenticationRefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
        rememberMe:
          type: boolean
      required:
        - refreshToken
        - rememberMe

    AuthenticateResponse:
      type: object
      properties:
        jwtToken:
          $ref: '#/components/schemas/JwtTokenDto'
        user:
          $ref: '#/components/schemas/UserDto'
      required:
        - jwtToken
        - user

    JwtTokenDto:
      type: object
      properties:
        accessToken:
          type: string
        accessTokenLiveDuration:
          type: integer
        refreshToken:
          type: string
        refreshTokenLiveDuration:
          type: integer
      required:
        - accessToken
        - accessTokenLiveDuration
        - refreshToken
        - refreshTokenLiveDuration

    WebResourceObservingAddRequest:
      type: object
      properties:
        resourceDescription:
          type: string
          description: описание вебресурса
        pluginId:
          type: string
          format: uuid
          description: id плагина

    AddPluginRequest:
      type: object
      properties:
        name:
          type: string
          description: название плагина
        baseUrl:
          type: string
          description: Префикс URL для взаимодействия с плагином
      required:
        - name
        - baseUrl

    AddPluginResponse:
      type: object
      properties:
        plugin:
          $ref: "#/components/schemas/PluginDto"
        accessToken:
          type: string
          description: Токен для доступа
      required:
        - plugin
        - accessToken

    CreateTaskRequest:
      type: object
      properties:
        pluginId:
          type: string
          format: uuid
          description: id плагина, для которого создается задача
        description:
          $ref: "#/components/schemas/PluginDescriptionDto"
      required:
        - pluginId
        - description

    MakeDecisionRequest:
      type: object
      properties:
        decision:
          $ref: "#/components/schemas/TaskDecisionEnum"
        comment:
          type: string
          description: комментарий
      required:
        - decision

    CreatePluginUsageRequest:
      type: object
      properties:
        pluginId:
          type: string
          format: uuid
          description: id плагина для начала использования
        distributionMethod:
          $ref: "#/components/schemas/DistributionMethodDto"
      required:
        - pluginId
        - distributionMethod

    TaskDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: id задачи
        plugin:
          $ref: "#/components/schemas/PluginDto"
        description:
          $ref: "#/components/schemas/PluginDescriptionDto"
        decision:
          $ref: "#/components/schemas/TaskDecisionEnum"
        comment:
          type: string
          description: Комментарий при принятии решений
      required:
        - plugin
        - description

    WebResourceObservingDto:
      type: object
      properties:
        webResourceDto:
          $ref: '#/components/schemas/WebResourceDto'
        observeSettings:
          $ref: '#/components/schemas/ObserveSettingsDto'
        status:
          $ref: '#/components/schemas/ObserveStatusEnum'
      required:
        - webResourceDto
        - observeSettings
        - status

    PluginUsageDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        distributionMethod:
          $ref: "#/components/schemas/DistributionMethodDto"
        expiredDate:
          type: string
          format: date-time
          description: Дата и время когда заканчивается использование плагина
        plugin:
          $ref: '#/components/schemas/PluginDto'
      required:
        - id
        - distributionMethod
        - expiredDate
        - plugin

    PluginDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        baseUrl:
          type: string
      required:
        - id
        - name
        - baseUrl

    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/UserRoleEnum"
      required:
        - id
        - type
        - role

    UserRoleEnum:
      type: string
      enum:
        - SIMPLE_USER
        - EMPLOYEE
        - ADMIN

    WebResourceDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
      required:
        - id
        - name

    PluginDescriptionDto:
      type: object
      properties:
        specificDescription:
          $ref: '#/components/schemas/PluginSpecificDescriptionDto'
        logoPath:
          type: string
          description: путь до логотипа плагина
        distributionMethods:
          type: array
          description: массив типов распространения плагина
          items:
            $ref: "#/components/schemas/DistributionMethodDto"
      required:
        - distributionMethods

    PluginSpecificDescriptionDto:
      type: object
      properties:
        description:
          type: string
          description: описание плагина
        imagePaths:
          type: array
          description: массив url до изображений
          items:
            type: string
        tags:
          type: array
          description: массив тегов плагина
          items:
            type: string

    DistributionMethodDto:
      type: object
      properties:
        cost:
          type: number
          description: стоимость плагина
        duration:
          type: string
          format: duration
          description: длительность действия типа распространения
        type:
          $ref: "#/components/schemas/DistributionPlanTypeEnum"
      required:
        - plugin
        - accessToken

    DistributionPlanTypeEnum:
      enum:
        - SUBSCRIBE
        - PURCHASE

    TaskDecisionEnum:
      enum:
        - APPROVE
        - REJECT

    ObserveSettingsDto:
      type: object
      properties:
        needNotify:
          type: boolean
      required:
        - needNotify

    ObserveStatusEnum:
      type: string
      enum:
        - OBSERVE
        - NOT_OBSERVE

    ErrorMessageDto:
      description: Сообщение с ошибкой
      properties:
        message:
          type: string
      required:
        - message
